import wollok.game.*
import personajes.personajes.*
import interfaz.interfaz.*
import personajes.sobrevivientes.*
import personajes.enemigos.*
import escenario.*
import direcciones.*

describe "Movimiento de un Personaje"
{
	fixture
	{
		game.addVisual(betty)
	}
	
	test "El personaje se crea en la posicion (1,1) por default" 
	{
		assert.equals(game.at(1,1), betty.position())
	}
	
	test "Al moverse arriba personaje aumenta en 1 la posicion en y y cambia su orientacion"
	{
		// Comienza en				//(1,1)
		betty.moverHacia(arriba)	//(1,2)
		
		assert.equals(game.at(1,2), betty.position())
		assert.equals(arriba, betty.orientacion())
	}
	
	test "Al moverse abajo el personaje disminuye en 1 la posicion en y y cambia su orientacion"
	{
		// Comienza en			//(1,1)
		betty.moverHacia(abajo)	//(1,0)
		
		assert.equals(game.at(1,0), betty.position())
		assert.equals(abajo, betty.orientacion())
	}
	
	test "Al moverse a izquierda el personaje disminuye en 1 la posicion en x y cambia su orientacion"
	{
		// Comienza en				//(1,1)
		betty.moverHacia(izquierda)	//(0,1)
		
		assert.equals(game.at(0,1), betty.position())
		assert.equals(izquierda, betty.orientacion())	
	}
	
	test "Al moverse a derecha el personaje aumenta en 1 la posicion en x y cambia su orientacion"
	{
		// Comienza en				//(1,1)
		betty.moverHacia(derecha)	//(2,1)
		
		assert.equals(game.at(2,1), betty.position())	
		assert.equals(derecha, betty.orientacion())
	}
	
	test "El personaje no puede moverse hacia la interfaz del escenario (ocupa ejes x e y)"
	{
		betty.moverHaciaSiEsPosible(abajo)
		betty.moverHaciaSiEsPosible(abajo)
		betty.moverHaciaSiEsPosible(izquierda)
		betty.moverHaciaSiEsPosible(izquierda)
		
		assert.equals(game.at(1,1), betty.position())
	}
	
	test "Si no es posible moverse a esa casilla, el personaje igualmente cambia su orientacion"
	{
		betty.moverHaciaSiEsPosible(izquierda)
		
		assert.equals(izquierda, betty.orientacion())
	}
	
	test "Al moverse a derecha cuando esta inmobilizad parcialmente el personaje mantiene su posicion pero cambia su orientacion adrecha"
	{
		// Comienza en (1,1)
		betty.comportamientoDeMovimiento(inmobilizadoParcialmente)
		betty.moverHacia(derecha)
		
		assert.equals(game.at(1,1), betty.position())
		assert.equals(derecha, betty.orientacion())
	}
	
	test "Al moverse a derecha cuando esta inmobilizad totalmente el personaje mantiene su posicion y su orientacion"
	{
		// Comienza en (1,1)
		betty.comportamientoDeMovimiento(inmobilizadoTotalmente)
		betty.moverHacia(derecha)
		
		assert.equals(game.at(1,1), betty.position())
		assert.equals(abajo, betty.orientacion())
	}
	
	test "Al moverse a derecha cuando esta confundidoe el personaje se mueve hacia la izquierda"
	{
		// Comienza en (1,1)
		betty.comportamientoDeMovimiento(confundido)
		betty.moverHacia(derecha)
		
		assert.equals(game.at(0,1), betty.position())
		assert.equals(izquierda, betty.orientacion())
	}
}

describe "Vida de un Personaje"
{
	const agresor = new ZombieTipo1()
	
	fixture
	{
		betty.inicializar() // Vida actual de betty = a Vida maxima (127) 
	}
	
	test "Al sufrir daño se disminuye la vida actual de un personaje en la misma cantidad" 
	{
		betty.sufrirDanio(30, agresor)
		assert.equals(97, betty.vidaActual())
	}
	
	test "Al llegar a 0 el personaje es derribado" 
	{
		betty.sufrirDanio(127, agresor)		
		assert.equals(derribado, betty.estado())
	}
	
	test "La salud no baja de 0 aunque haya sufrido un daño mayor a la vida actual" 
	{
		betty.sufrirDanio(999, agresor)
		assert.equals(0, betty.vidaActual())
	}
	
	test "Al curarse se aumenta la vida actual de un personaje en la misma cantidad" 
	{
		betty.sufrirDanio(50, agresor)
		betty.curar(30)		
		assert.equals(107, betty.vidaActual())
	}
	
	test "Al curarse la vida actual no puede superar a la vida maxima sin importar la cantidad de cura recibida" 
	{
		betty.curar(999)		
		assert.equals(127, betty.vidaActual())
	}
}

describe "Combate entre Personajes"
{
	const agresor = new ZombieTipo1()
	
	fixture
	{
		agresor.modificarPresicion(10) // aumenta precision a 100%
	}
	
	test "Cuando un personaje ataca a otro, se le inflinge daño segun las ecuaciones de daño correctamente" 
	{
		//Ecuacion de daño simplificada para este caso (Atk*50) / (Def+100)
		betty.inicializar() // Vida: 127 Def: 21.8
		agresor.atacarA(betty) // Atk: 26 + 1.5 + 3 = 30.5 MultiplicadorDeDaño de Enemigo = 25
		
		//Daño esperado = (30.5*25) / (21.8+100) = 6.2
		//Vida esperada = 127 - 6.2 = 120.8 redondeado al superior 121 
		
		assert.equals(121, betty.vidaActual())
	}
	test "La constante de daño recibido modifica el daño recibido en ese valor" 
	{
		betty.inicializar()
		betty.modificarConstanteDeDanioRecibido(5)
		agresor.atacarA(betty) 
		
		//Vida esperada = 121 - 5 = 116
		
		assert.equals(116, betty.vidaActual())
	}
	test "el multiplicador de daño recibido modifica el daño recibido en ese porcentaje" 
	{
		betty.inicializar()
		betty.modificarMultiplicadorDeDanioRecibido(50) // +50%
		agresor.atacarA(betty) 
		
		//Vida esperada = 127 - (6.2 + 50%) = 127 - 9.1 = 117.9 redondeado al superior 118
		
		assert.equals(118, betty.vidaActual())
	}
}