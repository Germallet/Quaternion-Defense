import personajes.estadosTemporales.*
import personajes.sobrevivientes.*
import personajes.personajes.*

describe "Comportamiendo de Quemadura"
{
	const quemadura = new Quemadura(betty, karl, 3)
	
	fixture
	{
		quemadura.aplicar()
	}
	
	test "Cuando se aplica una quemadura sobre un personaje, tiene como victima al personaje que afecto" 
	{	
		assert.equals(betty, quemadura.victima())
	}
	test "Cuando se aplica una quemadura sobre un personaje, su victima tiene esa quemadura" 
	{
		assert.equals(quemadura, betty.quemadura())
	}
	test "Cuando se aplica una quemadura sobre un personaje, el estado de la quemadura es tieneEstadoAlterado" 
	{
		assert.equals(tieneEstadoAlterado, betty.estadoDeQuemadura())
	}
	test "Cuando una quemadura se termina, el estado de la quemadura es noTieneEstadoAlterado" 
	{
		quemadura.terminar()
		
		assert.equals(noTieneEstadoAlterado, betty.estadoDeQuemadura())
	}
	test "Cuando un personaje con quemadura, cura la quemadura, se termina la quemadura" 
	{
		betty.curarQuemadura()
		
		assert.equals(noTieneEstadoAlterado, betty.estadoDeQuemadura())
	}
	test "Cuando un a personaje ya con quemadura se le aplica una quemaruda de menor gravedad, se mantiene la quemadura anterior" 
	{
		const quemaduraMenorGravedad = new Quemadura(betty, karl, 2)
		quemaduraMenorGravedad.aplicar()
		
		assert.equals(quemadura, betty.quemadura())
	}
	test "Cuando un a personaje ya con quemadura se le aplica una quemaruda de mayor gravedad, se reemplazsa la quemadura anterior por la nueva" 
	{
		const quemaduraMayorGravedad = new Quemadura(betty, karl, 4)
		quemaduraMayorGravedad.aplicar()
		
		assert.equals(quemaduraMayorGravedad, betty.quemadura())
	}
} 

describe "Comportamiendo de Sangrado"
{
	const sangrado = new Sangrado(betty, 3)
	
	fixture
	{
		sangrado.aplicar()
	}
	
	test "Cuando se aplica un sangrado sobre un personaje, tiene como victima al personaje que afecto" 
	{	
		assert.equals(betty, sangrado.victima())
	}
	test "Cuando se aplica un sangrado sobre un personaje, su victima tiene ese sangrado" 
	{
		assert.equals(sangrado, betty.sangrado())
	}
	test "Cuando se aplica sangrado sobre un personaje, aumenta el daño rebido en la gravedad" 
	{
		assert.equals(2, betty.constanteDeDanioRecibido()) //-1 defaul por calzoncillos
	}
	test "Cuando se aplica sangrado sobre un personaje, el estado del sangrado es tieneEstadoAlterado" 
	{
		assert.equals(tieneEstadoAlterado, betty.estadoDeSangrado())
	}
	test "Cuando se termina un sangrado, el estado del sangrado es noTieneEstadoAlterado y se anula el daño adicional que sufria el personaje" 
	{
		sangrado.terminar()
		
		assert.equals(noTieneEstadoAlterado, betty.estadoDeSangrado())
		assert.equals(-1, betty.constanteDeDanioRecibido()) //-1 defaul por calzoncillos
	}
	test "Cuando un personaje con sangrado, cura el sangrado, el sangrado se temina" 
	{
		betty.curarSangrado()
		
		assert.equals(noTieneEstadoAlterado, betty.estadoDeSangrado())
	}
	test "Cuando un personaje ya con sangrado se desangra, su sangrado aumenta la gravedad en 2 veces la gravedad del nuevo sangrado" 
	{
		const otroSangrado = new Sangrado(betty, 2)
		otroSangrado.aplicar()
		
		assert.equals(7, betty.sangrado().gravedad())
	}
}

describe "Comportamiendo de Escarchado"
{
	const escarcha = new Escarcha(betty, 3)
	
	fixture
	{
		escarcha.aplicar()
	}
	
	test "Cuando se aplica una escarcha sobre un personaje, tiene como victima al personaje que afecto" 
	{	
		assert.equals(betty, escarcha.victima())
	}
	test "Cuando se aplica una escarcha sobre un personaje, su victima tiene esa escarcha" 
	{
		assert.equals(escarcha, betty.escarcha())
	}
	test "Cuando se aplica escarcha sobre un personaje, se reduce su ataque en 5 * gravedad" 
	{
		assert.equals(9.4, betty.ataque()) // 19.4 Ataque base + 5 de manos
	}
	test "Cuando se aplica escarcha sobre un personaje, se reduce su probabilidad de evasion en 10% * gravedad" 
	{
		assert.equals(-30, betty.probabilidadDeEvasion()) // 0 default
	}
	test "Cuando se aplica escarcha sobre un personaje, se reduce su probabilidad de bloqueo en 10% * gravedad" 
	{
		assert.equals(-30, betty.probabilidadDeBloqueo()) // 0 default
	}
	test "Cuando se aplica escarcha sobre un personaje, el estado de escarcha es tieneEstadoAlterado" 
	{
		assert.equals(tieneEstadoAlterado, betty.estadoDeEscarcha())
	}
	test "Cuando la escarcha se termina, el estado de escarcha es noTieneEstadoAlterado y las estadisticas retornan a la normalidad" 
	{
		escarcha.terminar()
		
		assert.equals(noTieneEstadoAlterado, betty.estadoDeEscarcha())
		assert.equals(24.4, betty.ataque())
		assert.equals(0, betty.probabilidadDeEvasion())
		assert.equals(0, betty.probabilidadDeBloqueo())
	}
	test "Cuando un personaje escarchado, cura la escarcha, termina el estado" 
	{
		betty.curarEscarcha()
		
		assert.equals(noTieneEstadoAlterado, betty.estadoDeEscarcha())
	}
	test "Cuando un personaje ya con escarcha se escarcha, su escarcha aumenta en la gravedad en la gravedad de la nueva escarcha" 
	{
		const otraEscarcha = new Escarcha(betty, 1)
		otraEscarcha.aplicar()
		
		assert.equals(4, betty.escarcha().gravedad())
	}
	test "Cuando un personaje tiene una escarcha que alcanza gravedad 5, pierde la escarcha y se congela" 
	{
		const otraEscarcha = new Escarcha(betty, 2)
		otraEscarcha.aplicar()
		
		assert.equals(noTieneEstadoAlterado, betty.estadoDeEscarcha())
		assert.equals(tieneEstadoAlterado, betty.estadoDeCongelado())
	}
}

describe "Comportamiendo de Congelado"
{
	const congelado = new Congelado(betty, 2)
	
	fixture
	{
		congelado.aplicar()
	}
	
	test "Cuando se aplica un congelado sobre un personaje, se deshabilida su ataque" 
	{	
		assert.equals(ataqueDeshabilitado, betty.comportamientoDeAtaque())
	}
	test "Cuando se aplica un congelado sobre un personaje, se deshabilida sus habilidades" 
	{	
		assert.equals(habilidadesDeshabilitadas, betty.comportamientoDeHabilidades())
	}
	test "Cuando se aplica un congelado sobre un personaje, lo inmobiliza totalmente" 
	{	
		assert.equals(inmobilizadoTotalmente, betty.comportamientoDeMovimiento())
	}
	test "Cuando se aplica un congelado sobre un personaje, tiene como victima al personaje que afecto" 
	{	
		assert.equals(betty, congelado.victima())
	}
	test "Cuando se aplica una ceguera sobre un personaje, su victima tiene ese congelado" 
	{
		assert.equals(congelado, betty.congelado())
	}
	test "Cuando se aplica un congelado sobre un personaje, su estado de congelado es tieneEstadoAlterado" 
	{
		assert.equals(tieneEstadoAlterado, betty.estadoDeCongelado())
	}
	test "Cuando un congelado se termina, el estado de congelado es noTieneEstadoAlterado y se vuelve a habilitar el movimiento, el ataque y el uso de habilidades" 
	{
		congelado.terminar()
		
		assert.equals(noTieneEstadoAlterado, betty.estadoDeCongelado())
		assert.equals(ataqueHabilitado, betty.comportamientoDeAtaque())
		assert.equals(habilidadesHabilitadas, betty.comportamientoDeHabilidades())
		assert.equals(normal, betty.comportamientoDeMovimiento())
	}
	test "Cuando un personaje congelado, cura el congelado, termina el congelado" 
	{
		betty.curarCongelado()
		
		assert.equals(noTieneEstadoAlterado, betty.estadoDeCongelado())
	}
	test "Cuando un personaje ya con congela es congelado, aumenta la gravedad en 1" 
	{
		const otroCongelado = new Congelado(betty, 2)
		otroCongelado.aplicar()
		
		assert.equals(3, betty.congelado().gravedad())
	}
} 

describe "Comportamiendo de Ceguera"
{
	const ceguera = new Ceguera(betty, 2)
	
	fixture
	{
		ceguera.aplicar()
	}
	
	test "Cuando se aplica una ceguera sobre un personaje, disminuye la precision en 10% * gravedad" 
	{
		assert.equals(70, betty.presicion()) // Precision base 90%
	}
	test "Cuando se aplica una ceguera sobre un personaje, tiene como victima al personaje que afecto" 
	{	
		assert.equals(betty, ceguera.victima())
	}
	test "Cuando se aplica una ceguera sobre un personaje, su victima tiene esa ceguera" 
	{
		assert.equals(ceguera, betty.ceguera())
	}
	test "Cuando se aplica una ceguera sobre un personaje, el estado de ceguera es tieneEstadoAlterado" 
	{
		assert.equals(tieneEstadoAlterado, betty.estadoDeCeguera())
	}
	test "Cuando una ceguera se termina, el estado de ceguera es noTieneEstadoAlterado y se vuelve la presicion a la normalidad" 
	{
		ceguera.terminar()
		
		assert.equals(90, betty.presicion()) 
	}
	test "Cuando un personaje con ceguera, cura la ceguera, se termina la ceguera" 
	{
		betty.curarCeguera()
		
		assert.equals(noTieneEstadoAlterado, betty.estadoDeCeguera())
	}
	test "Cuando un personaje ya con ceguera se ciega, su ceguera aumenta la gravedad en la gravedad de la nueva ceguera" 
	{
		const otraCeguera = new Ceguera (betty, 3)
		otraCeguera.aplicar()
		
		assert.equals(5, betty.ceguera().gravedad())
	}
}