import wollok.game.*
import items.equipos.*

import personajes.sobrevivientes.*
import personajes.enemigos.*
import personajes.personajes.*

describe "Armas"
{
	var enemigo = new ZombieTipo1() 
	var mano = new Manos()
	var arco = new Arco()
	
	fixture
	{
		betty.position(game.at(1,1))
		enemigo.position(game.at(2,2))
		
		mano.equiparEn(betty)
	}
	
	test "La mano queda equipada despues de equiparse en alguien" 
	{
		assert.that(mano.estaEquipado())
	}
	test "El usuario de la mano es el sobreviviente en quien se equipo" 
	{
		assert.equals(betty, mano.usuario())
	}
	/*test "El ataque de la mano es igual a la fuerza del usuario" 
	{
		mano.equiparEn(betty)
		
		assert.equals(mano.ataque(), mano.usuario().ataque())
	}*/
	test "Dos manos distintas son el mismo item"
	{
		assert.that(mano.esMismoItem(new Manos()))
	}
	test "La mano tienen rango 1-1"
	{
		assert.equals(1, mano.rangoMinimo())
		assert.equals(1, mano.rangoMaximo())
	}
	test "El arco tienen rango 1-4"
	{
		assert.equals(1, arco.rangoMinimo())
		assert.equals(4, arco.rangoMaximo())
	}
	test "El enemigo no esta en rango de ataque de la mano (esta a 2 de distancia)"
	{
		assert.notThat(mano.estaEnRango(enemigo))	
	}
	test "El enemigo esta en rango de ataque del arco (esta a 2 de distancia)"
	{
		arco.equiparEn(betty)
		assert.that(arco.estaEnRango(enemigo))	
	}
	/*test "Cuando la antorcha ataca a alguien lo deja quemados"
	{
		var antorcha = new Antorcha()
		antorcha.equiparEn(betty)
		antorcha.atacarA(enemigo)
		
		assert.equals(tieneEstadoAlterado, betty.estadoQuemadura())	
	}
	test "El 3er Ataque de la espada perforante ignora defensa y se multiplica en 1.5"
	{
		var espadaPerforante = new EspadaPerforante()
		var danioPrimerAtaque 
		var danioSegundoAtaque 
		var danioTercerAtaque 
		
		espadaPerforante.equiparEn(betty)
		
		espadaPerforante.atacarA(enemigo) // Primer ataques
		
		danioPrimerAtaque = enemigo.vidaMaxima()-enemigo.vidaActual()
		
		espadaPerforante.atacarA(enemigo) // Segundo ataque
		
		danioSegundoAtaque = enemigo.vidaMaxima()-danioPrimerAtaque-enemigo.vidaActual()
		
		assert.equals(danioPrimerAtaque, danioSegundoAtaque)
		
		espadaPerforante.atacarA(enemigo) // Tercer ataque
		
		danioTercerAtaque = enemigo.vidaMaxima()-danioPrimerAtaque-danioSegundoAtaque-enemigo.vidaActual()
		
		assert.equals((danioPrimerAtaque+enemigo.defensa())*1.5, danioTercerAtaque)		
	}*/
}
